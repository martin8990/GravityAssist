#pragma kernel CalculateHeight
#include "noiseSimplex.cginc"


struct Biome
{
    float height;
    float amplitude;
    float smoothness;
    float fractals;
    float seed;
    float4 color;
};

float BiomeGradient;
float BiomeAmplitude;
float BiomeSmoothness;
float BiomeFractals;
float BiomeSeed;

RWTexture2D<float4> Result;
RWStructuredBuffer<Biome> BiomeBuffer;
int nBiomes;
int Center;

float fractalize(float amplitude, float fractals, float seed, float smoothness, int2 id)
{
    float2 pos = (id) / (smoothness);
    float val = 0;
    for (int i = 0; i < fractals; i++)
    {
        val += ((snoise((pos.xy + uint2(seed, seed)) * pow(2, i)) + 1.0) / 2.0) / pow(2, i);
    }

    return lerp(-amplitude, amplitude, val);
}
[numthreads(8, 8, 1)]
void CalculateHeight(uint3 id : SV_DispatchThreadID)
{
    float biome_h = fractalize(BiomeAmplitude, BiomeFractals, BiomeSeed, BiomeSmoothness, id.xy) + 0.5f - distance(id.xy,Center) * BiomeGradient;
    Biome lowerBiome = BiomeBuffer[0];
    Biome upperBiome = BiomeBuffer[nBiomes-1];
    float lowerHeight = -1e14;
    float upperHeight = 1e14;
    for (int i = 0; i < nBiomes;i++)
    {
        Biome biome = BiomeBuffer[i];
        if (biome.height < biome_h && biome.height > lowerHeight)
        {
            lowerBiome = biome;
            lowerHeight = biome.height;
        }
        else if (biome.height > biome_h && biome.height < upperHeight)
        {
            upperBiome = biome;
            upperHeight = biome.height;
        }
    }
    float t = (biome_h - lowerHeight) / (upperHeight - lowerHeight);
    //float lowerNoise = fractalize(lowerBiome.amplitude, lowerBiome.fractals, lowerBiome.seed, lowerBiome.smoothness, id.xy);
    //float upperNoise = fractalize(upperBiome.amplitude, upperBiome.fractals, upperBiome.seed, upperBiome.smoothness, id.xy);

    lowerHeight += fractalize(lowerBiome.amplitude, lowerBiome.fractals, lowerBiome.seed, lowerBiome.smoothness, id.xy);
    upperHeight += fractalize(upperBiome.amplitude, upperBiome.fractals, upperBiome.seed, upperBiome.smoothness, id.xy);
    Result[id.xy] = float4(lerp(lowerBiome.color,upperBiome.color,t).xyz, lerp(lowerHeight, upperHeight, t));

}